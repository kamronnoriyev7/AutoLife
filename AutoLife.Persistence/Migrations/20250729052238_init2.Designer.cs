// <auto-generated />
using System;
using AutoLife.Persistence.DataBaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AutoLife.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250729052238_init2")]
    partial class init2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AutoLife.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasaEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid");

                    b.Property<string>("HouseNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Orientation")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid?>("RegionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Street")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.AppFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasaEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppFeedbacks");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasaEntityId")
                        .HasColumnType("uuid");

                    b.Property<int>("BookingType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FuelStationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ParkingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ServiceCenterId")
                        .HasColumnType("uuid");

                    b.Property<int?>("SpotCount")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("To")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("FuelStationId");

                    b.HasIndex("ParkingId");

                    b.HasIndex("ServiceCenterId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("BasaEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("BasaEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("BasaEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UzName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("BasaEntityId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.District", b =>
                {
                    b.Property<Guid>("BasaEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UzName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("BasaEntityId");

                    b.HasIndex("RegionId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasaEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FuelStationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ParkingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ServiceCenterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FuelStationId");

                    b.HasIndex("ParkingId");

                    b.HasIndex("ServiceCenterId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Favorites", (string)null);
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.FuelPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasaEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FuelStationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FuelSubTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FuelStationId");

                    b.HasIndex("FuelSubTypeId");

                    b.ToTable("FuelPrices");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.FuelStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasaEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyBasaEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FuelSubTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FuelTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("OperatorName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyBasaEntityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FuelSubTypeId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("FuelStations");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.FuelSubType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasaEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("FuelTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FuelTypeId");

                    b.ToTable("FuelSubType");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.FuelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasaEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("FuelType");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.GeoLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasaEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("GeoLocations", (string)null);
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasaEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FuelStationId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("NewsId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParkingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ServiceCenterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FuelStationId");

                    b.HasIndex("NewsId");

                    b.HasIndex("ParkingId");

                    b.HasIndex("ServiceCenterId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasaEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FuelStationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ParkingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ServiceCenterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FuelStationId");

                    b.HasIndex("ParkingId");

                    b.HasIndex("ServiceCenterId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("News", (string)null);
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasaEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FuelStationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ParkingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ServiceCenterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FuelStationId");

                    b.HasIndex("ParkingId");

                    b.HasIndex("ServiceCenterId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Parking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<int>("AvailableSpaces")
                        .HasColumnType("integer");

                    b.Property<double>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<Guid>("BasaEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ClosingTime")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasCameras")
                        .HasColumnType("boolean");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsCovered")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPreBookingAllowed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("OpeningTime")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TotalSpaces")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Parkings", (string)null);
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.ParkingPrice", b =>
                {
                    b.Property<Guid>("BasaEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("interval");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ParkingId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("numeric");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BasaEntityId");

                    b.HasIndex("ParkingId");

                    b.ToTable("ParkingPrices");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasaEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("Companyid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FuelStationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ParkingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ServiceCenterId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Stars")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("Companyid");

                    b.HasIndex("FuelStationId");

                    b.HasIndex("ParkingId");

                    b.HasIndex("ServiceCenterId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Region", b =>
                {
                    b.Property<Guid>("BasaEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UzName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("BasaEntityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions", (string)null);
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.ServiceCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasaEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("ServiceType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceCenters", (string)null);
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasaEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("IdentityUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasaEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("CompanyBasaEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FuelTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NumberPlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBasaEntityId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Address", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Company", "Company")
                        .WithOne("Address")
                        .HasForeignKey("AutoLife.Domain.Entities.Address", "CompanyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AutoLife.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AutoLife.Domain.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AutoLife.Domain.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.AppFeedback", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("AppFeedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Booking", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("AutoLife.Domain.Entities.FuelStation", "FuelStation")
                        .WithMany("Bookings")
                        .HasForeignKey("FuelStationId");

                    b.HasOne("AutoLife.Domain.Entities.Parking", "Parking")
                        .WithMany("Bookings")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutoLife.Domain.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany("Bookings")
                        .HasForeignKey("ServiceCenterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoLife.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Address");

                    b.Navigation("FuelStation");

                    b.Navigation("Parking");

                    b.Navigation("ServiceCenter");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Company", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("Companies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.District", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Region", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.FuelStation", "FuelStation")
                        .WithMany("Favorites")
                        .HasForeignKey("FuelStationId");

                    b.HasOne("AutoLife.Domain.Entities.Parking", "Parking")
                        .WithMany("Favorites")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutoLife.Domain.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany("Favorites")
                        .HasForeignKey("ServiceCenterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoLife.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Favorites")
                        .HasForeignKey("VehicleId");

                    b.Navigation("FuelStation");

                    b.Navigation("Parking");

                    b.Navigation("ServiceCenter");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.FuelPrice", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.FuelStation", "FuelStation")
                        .WithMany("FuelPrices")
                        .HasForeignKey("FuelStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AutoLife.Domain.Entities.FuelSubType", "FuelSubType")
                        .WithMany("FuelPrices")
                        .HasForeignKey("FuelSubTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FuelStation");

                    b.Navigation("FuelSubType");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.FuelStation", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Address", "Address")
                        .WithMany("FuelStations")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AutoLife.Domain.Entities.Company", null)
                        .WithMany("FuelStations")
                        .HasForeignKey("CompanyBasaEntityId");

                    b.HasOne("AutoLife.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AutoLife.Domain.Entities.FuelSubType", "FuelSubType")
                        .WithMany()
                        .HasForeignKey("FuelSubTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AutoLife.Domain.Entities.FuelType", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("FuelStations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("FuelSubType");

                    b.Navigation("FuelType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.FuelSubType", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.FuelType", "FuelType")
                        .WithMany("FuelSubTypes")
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FuelType");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.GeoLocation", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Address", "Address")
                        .WithOne("GeoLocation")
                        .HasForeignKey("AutoLife.Domain.Entities.GeoLocation", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Image", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Company", "Company")
                        .WithMany("Images")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AutoLife.Domain.Entities.FuelStation", "FuelStation")
                        .WithMany("Images")
                        .HasForeignKey("FuelStationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AutoLife.Domain.Entities.News", "News")
                        .WithMany("Images")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutoLife.Domain.Entities.Parking", "Parking")
                        .WithMany("Images")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutoLife.Domain.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany("Images")
                        .HasForeignKey("ServiceCenterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AutoLife.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Images")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Company");

                    b.Navigation("FuelStation");

                    b.Navigation("News");

                    b.Navigation("Parking");

                    b.Navigation("ServiceCenter");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.News", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Company", "Company")
                        .WithMany("NewsList")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AutoLife.Domain.Entities.FuelStation", "FuelStation")
                        .WithMany("News")
                        .HasForeignKey("FuelStationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AutoLife.Domain.Entities.Parking", "Parking")
                        .WithMany("News")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AutoLife.Domain.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany("News")
                        .HasForeignKey("ServiceCenterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("News")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AutoLife.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("News")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Company");

                    b.Navigation("FuelStation");

                    b.Navigation("Parking");

                    b.Navigation("ServiceCenter");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Notification", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Booking", "Booking")
                        .WithMany("Notifications")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AutoLife.Domain.Entities.Company", "Company")
                        .WithMany("Notifications")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AutoLife.Domain.Entities.FuelStation", "FuelStation")
                        .WithMany("Notifications")
                        .HasForeignKey("FuelStationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AutoLife.Domain.Entities.Parking", "Parking")
                        .WithMany("Notifications")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutoLife.Domain.Entities.ServiceCenter", "Service")
                        .WithMany("Notifications")
                        .HasForeignKey("ServiceCenterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoLife.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Notifications")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Booking");

                    b.Navigation("Company");

                    b.Navigation("FuelStation");

                    b.Navigation("Parking");

                    b.Navigation("Service");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Parking", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Address", "Address")
                        .WithMany("Parkings")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoLife.Domain.Entities.Company", "Company")
                        .WithMany("Parkings")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("Parkings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.ParkingPrice", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Parking", "Parking")
                        .WithMany()
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Rating", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Booking", null)
                        .WithMany("Ratings")
                        .HasForeignKey("BookingId");

                    b.HasOne("AutoLife.Domain.Entities.Company", "Company")
                        .WithMany("Ratings")
                        .HasForeignKey("Companyid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AutoLife.Domain.Entities.FuelStation", "FuelStation")
                        .WithMany("Ratings")
                        .HasForeignKey("FuelStationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AutoLife.Domain.Entities.Parking", "Parking")
                        .WithMany("Ratings")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AutoLife.Domain.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany("Ratings")
                        .HasForeignKey("ServiceCenterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutoLife.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Ratings")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Company");

                    b.Navigation("FuelStation");

                    b.Navigation("Parking");

                    b.Navigation("ServiceCenter");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Region", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.ServiceCenter", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Address", "Address")
                        .WithMany("ServiceCenters")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AutoLife.Domain.Entities.Company", "Company")
                        .WithMany("ServiceCenters")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("ServiceCenters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Company", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("CompanyBasaEntityId");

                    b.HasOne("AutoLife.Domain.Entities.FuelType", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuelType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Address", b =>
                {
                    b.Navigation("FuelStations");

                    b.Navigation("GeoLocation");

                    b.Navigation("Parkings");

                    b.Navigation("ServiceCenters");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Booking", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Company", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("FuelStations");

                    b.Navigation("Images");

                    b.Navigation("NewsList");

                    b.Navigation("Notifications");

                    b.Navigation("Parkings");

                    b.Navigation("Ratings");

                    b.Navigation("ServiceCenters");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.FuelStation", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Favorites");

                    b.Navigation("FuelPrices");

                    b.Navigation("Images");

                    b.Navigation("News");

                    b.Navigation("Notifications");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.FuelSubType", b =>
                {
                    b.Navigation("FuelPrices");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.FuelType", b =>
                {
                    b.Navigation("FuelSubTypes");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.News", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Parking", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Favorites");

                    b.Navigation("Images");

                    b.Navigation("News");

                    b.Navigation("Notifications");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Region", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.ServiceCenter", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Favorites");

                    b.Navigation("Images");

                    b.Navigation("News");

                    b.Navigation("Notifications");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("AppFeedbacks");

                    b.Navigation("Bookings");

                    b.Navigation("Companies");

                    b.Navigation("Favorites");

                    b.Navigation("FuelStations");

                    b.Navigation("Images");

                    b.Navigation("News");

                    b.Navigation("Notifications");

                    b.Navigation("Parkings");

                    b.Navigation("Ratings");

                    b.Navigation("ServiceCenters");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Favorites");

                    b.Navigation("Images");

                    b.Navigation("News");

                    b.Navigation("Notifications");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
