// <auto-generated />
using System;
using AutoLife.Persistence.DataBaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AutoLife.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250710120224_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AutoLife.Domain.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Orientation")
                        .HasColumnType("text");

                    b.Property<long?>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.AppFeedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppFeedbacks");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Booking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("FuelStationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("ParkingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceCenterId")
                        .HasColumnType("bigint");

                    b.Property<int?>("SpotCount")
                        .HasColumnType("integer");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("To")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("FuelStationId");

                    b.HasIndex("ParkingId");

                    b.HasIndex("ServiceCenterId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UzName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UzName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Favorite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("FuelStationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("ParkingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceCenterId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FuelStationId");

                    b.HasIndex("ParkingId");

                    b.HasIndex("ServiceCenterId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.FuelHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FuelStationId")
                        .HasColumnType("bigint");

                    b.Property<int>("FuelType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FuelStationId");

                    b.HasIndex("UserId");

                    b.ToTable("FuelHistories");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.FuelPrice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FuelStationId")
                        .HasColumnType("bigint");

                    b.Property<long>("FuelSubTypeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("FuelType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FuelStationId");

                    b.HasIndex("FuelSubTypeId")
                        .IsUnique();

                    b.ToTable("FuelPrices");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.FuelStation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("FuelSubTypeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("FuelType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OperatorName")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FuelSubTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("FuelStations");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.FuelSubType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FuelType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("FuelSubTypes");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.GeoLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("GeoLocations");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("FuelStationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("NewsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParkingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceCenterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FuelStationId");

                    b.HasIndex("NewsId");

                    b.HasIndex("ParkingId");

                    b.HasIndex("ServiceCenterId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.News", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("FuelStationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("ParkingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceCenterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FuelStationId");

                    b.HasIndex("ParkingId");

                    b.HasIndex("ServiceCenterId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<long?>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("FuelStationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<long?>("ParkingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceCenterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FuelStationId");

                    b.HasIndex("ParkingId");

                    b.HasIndex("ServiceCenterId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Parking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<int>("AvailableSpaces")
                        .HasColumnType("integer");

                    b.Property<double>("AverageRating")
                        .HasColumnType("double precision");

                    b.Property<string>("ClosingTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasCameras")
                        .HasColumnType("boolean");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsCovered")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPreBookingAllowed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OpeningTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalSpaces")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Parkings");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.ParkingPrice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("interval");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("ParkingId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("numeric");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParkingId");

                    b.ToTable("ParkingPrices");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Rating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<long?>("Companyid")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("FuelStationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("ParkingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceCenterId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Stars")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("Companyid");

                    b.HasIndex("FuelStationId");

                    b.HasIndex("ParkingId");

                    b.HasIndex("ServiceCenterId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UzName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.ServiceCenter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("ServiceType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceCenters");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FuelType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumberPlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Address", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Company", "Company")
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyId");

                    b.HasOne("AutoLife.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("AutoLife.Domain.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("AutoLife.Domain.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.AppFeedback", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("AppFeedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Booking", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("AutoLife.Domain.Entities.FuelStation", "FuelStation")
                        .WithMany("Bookings")
                        .HasForeignKey("FuelStationId");

                    b.HasOne("AutoLife.Domain.Entities.Parking", "Parking")
                        .WithMany("Bookings")
                        .HasForeignKey("ParkingId");

                    b.HasOne("AutoLife.Domain.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany("Bookings")
                        .HasForeignKey("ServiceCenterId");

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoLife.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Address");

                    b.Navigation("FuelStation");

                    b.Navigation("Parking");

                    b.Navigation("ServiceCenter");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Company", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("Companies")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.District", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Region", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.FuelStation", "FuelStation")
                        .WithMany("Favorites")
                        .HasForeignKey("FuelStationId");

                    b.HasOne("AutoLife.Domain.Entities.Parking", "Parking")
                        .WithMany("Favorites")
                        .HasForeignKey("ParkingId");

                    b.HasOne("AutoLife.Domain.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany("Favorites")
                        .HasForeignKey("ServiceCenterId");

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoLife.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Favorites")
                        .HasForeignKey("VehicleId");

                    b.Navigation("FuelStation");

                    b.Navigation("Parking");

                    b.Navigation("ServiceCenter");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.FuelHistory", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.FuelStation", "FuelStation")
                        .WithMany("FuelHistories")
                        .HasForeignKey("FuelStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuelStation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.FuelPrice", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.FuelStation", "FuelStation")
                        .WithMany("FuelPrices")
                        .HasForeignKey("FuelStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoLife.Domain.Entities.FuelSubType", "FuelSubType")
                        .WithOne("FuelPrice")
                        .HasForeignKey("AutoLife.Domain.Entities.FuelPrice", "FuelSubTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuelStation");

                    b.Navigation("FuelSubType");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.FuelStation", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Address", "Address")
                        .WithMany("FuelStations")
                        .HasForeignKey("AddressId");

                    b.HasOne("AutoLife.Domain.Entities.Company", "Company")
                        .WithMany("FuelStations")
                        .HasForeignKey("CompanyId");

                    b.HasOne("AutoLife.Domain.Entities.FuelSubType", "FuelSubType")
                        .WithMany()
                        .HasForeignKey("FuelSubTypeId");

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("FuelStations")
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("FuelSubType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.GeoLocation", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Address", "Address")
                        .WithOne("GeoLocation")
                        .HasForeignKey("AutoLife.Domain.Entities.GeoLocation", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Image", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Company", "Company")
                        .WithMany("Images")
                        .HasForeignKey("CompanyId");

                    b.HasOne("AutoLife.Domain.Entities.FuelStation", "FuelStation")
                        .WithMany("Images")
                        .HasForeignKey("FuelStationId");

                    b.HasOne("AutoLife.Domain.Entities.News", "News")
                        .WithMany("Images")
                        .HasForeignKey("NewsId");

                    b.HasOne("AutoLife.Domain.Entities.Parking", "Parking")
                        .WithMany("Images")
                        .HasForeignKey("ParkingId");

                    b.HasOne("AutoLife.Domain.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany("Images")
                        .HasForeignKey("ServiceCenterId");

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId");

                    b.HasOne("AutoLife.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Images")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Company");

                    b.Navigation("FuelStation");

                    b.Navigation("News");

                    b.Navigation("Parking");

                    b.Navigation("ServiceCenter");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.News", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Company", "Company")
                        .WithMany("NewsList")
                        .HasForeignKey("CompanyId");

                    b.HasOne("AutoLife.Domain.Entities.FuelStation", "FuelStation")
                        .WithMany("News")
                        .HasForeignKey("FuelStationId");

                    b.HasOne("AutoLife.Domain.Entities.Parking", "Parking")
                        .WithMany("News")
                        .HasForeignKey("ParkingId");

                    b.HasOne("AutoLife.Domain.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany("News")
                        .HasForeignKey("ServiceCenterId");

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("News")
                        .HasForeignKey("UserId");

                    b.HasOne("AutoLife.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("News")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Company");

                    b.Navigation("FuelStation");

                    b.Navigation("Parking");

                    b.Navigation("ServiceCenter");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Notification", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Booking", "Booking")
                        .WithMany("Notifications")
                        .HasForeignKey("BookingId");

                    b.HasOne("AutoLife.Domain.Entities.Company", "Company")
                        .WithMany("Notifications")
                        .HasForeignKey("CompanyId");

                    b.HasOne("AutoLife.Domain.Entities.FuelStation", "FuelStation")
                        .WithMany("Notifications")
                        .HasForeignKey("FuelStationId");

                    b.HasOne("AutoLife.Domain.Entities.Parking", "Parking")
                        .WithMany("Notifications")
                        .HasForeignKey("ParkingId");

                    b.HasOne("AutoLife.Domain.Entities.ServiceCenter", "Service")
                        .WithMany("Notifications")
                        .HasForeignKey("ServiceCenterId");

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoLife.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Notifications")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Booking");

                    b.Navigation("Company");

                    b.Navigation("FuelStation");

                    b.Navigation("Parking");

                    b.Navigation("Service");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Parking", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Address", "Address")
                        .WithMany("Parkings")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoLife.Domain.Entities.Company", "Company")
                        .WithMany("Parkings")
                        .HasForeignKey("CompanyId");

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("Parkings")
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.ParkingPrice", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Parking", "Parking")
                        .WithMany()
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Rating", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Booking", null)
                        .WithMany("Ratings")
                        .HasForeignKey("BookingId");

                    b.HasOne("AutoLife.Domain.Entities.Company", "Company")
                        .WithMany("Ratings")
                        .HasForeignKey("Companyid");

                    b.HasOne("AutoLife.Domain.Entities.FuelStation", "FuelStation")
                        .WithMany("Ratings")
                        .HasForeignKey("FuelStationId");

                    b.HasOne("AutoLife.Domain.Entities.Parking", "Parking")
                        .WithMany("Ratings")
                        .HasForeignKey("ParkingId");

                    b.HasOne("AutoLife.Domain.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany("Ratings")
                        .HasForeignKey("ServiceCenterId");

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId");

                    b.HasOne("AutoLife.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Ratings")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Company");

                    b.Navigation("FuelStation");

                    b.Navigation("Parking");

                    b.Navigation("ServiceCenter");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Region", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.ServiceCenter", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Address", "Address")
                        .WithMany("ServiceCenters")
                        .HasForeignKey("AddressId");

                    b.HasOne("AutoLife.Domain.Entities.Company", "Company")
                        .WithMany("ServiceCenters")
                        .HasForeignKey("CompanyId");

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("ServiceCenters")
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("AutoLife.Domain.Entities.Company", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("CompanyId");

                    b.HasOne("AutoLife.Domain.Entities.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Address", b =>
                {
                    b.Navigation("FuelStations");

                    b.Navigation("GeoLocation");

                    b.Navigation("Parkings");

                    b.Navigation("ServiceCenters");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Booking", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Company", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("FuelStations");

                    b.Navigation("Images");

                    b.Navigation("NewsList");

                    b.Navigation("Notifications");

                    b.Navigation("Parkings");

                    b.Navigation("Ratings");

                    b.Navigation("ServiceCenters");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.FuelStation", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Favorites");

                    b.Navigation("FuelHistories");

                    b.Navigation("FuelPrices");

                    b.Navigation("Images");

                    b.Navigation("News");

                    b.Navigation("Notifications");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.FuelSubType", b =>
                {
                    b.Navigation("FuelPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.News", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Parking", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Favorites");

                    b.Navigation("Images");

                    b.Navigation("News");

                    b.Navigation("Notifications");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Region", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.ServiceCenter", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Favorites");

                    b.Navigation("Images");

                    b.Navigation("News");

                    b.Navigation("Notifications");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("AppFeedbacks");

                    b.Navigation("Bookings");

                    b.Navigation("Companies");

                    b.Navigation("Favorites");

                    b.Navigation("FuelStations");

                    b.Navigation("Images");

                    b.Navigation("News");

                    b.Navigation("Notifications");

                    b.Navigation("Parkings");

                    b.Navigation("Ratings");

                    b.Navigation("RefreshTokens");

                    b.Navigation("ServiceCenters");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("AutoLife.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Favorites");

                    b.Navigation("Images");

                    b.Navigation("News");

                    b.Navigation("Notifications");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
